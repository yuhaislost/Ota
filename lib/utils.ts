import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";
import mongoose from 'mongoose';
import { fetchAllComments } from "./actions/thread.actions";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

// created by chatgpt
export function formatDateString(dateString: string) {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "short",
    day: "numeric",
  };

  const date = new Date(dateString);
  const formattedDate = date.toLocaleDateString(undefined, options);

  const time = date.toLocaleTimeString([], {
    hour: "numeric",
    minute: "2-digit",
  });

  return `${time} - ${formattedDate}`;
}

// created by chatgpt
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}

export async function fetchAllCommentsBFS(threadId: mongoose.Types.ObjectId)
{
    let queue: mongoose.Types.ObjectId[] = [threadId];
    let threadCommentMap = new Map<mongoose.Types.ObjectId, any>(); //adjacency list

    while(queue.length > 0)
    {
        let top = queue[0];
        let comments = await fetchAllComments(top);
        let childrenComments: any = [];

        for (let i = 0; i < comments.length; i++)
        {
          childrenComments.push(comments[i]);
          queue.push(comments[i]._id);
        }

        threadCommentMap.set(top, childrenComments);

        queue.shift();
    }

    return threadCommentMap;
}